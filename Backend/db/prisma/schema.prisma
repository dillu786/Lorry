generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum to represent user type (Driver or Owner)
enum UserType {
  DRIVER
  OWNER
  USER
}

enum Gender{
  MALE
  FEMALE
}

model User{
  Id                 Int   @default(autoincrement()) @id
  MobileNumber       String
  LastLoggedIn       DateTime  @default(now())
  CreatedDate        DateTime  @default(now())
  UserWallet         UserWallet?
}
model Owner {
  Id                    Int       @default(autoincrement()) @id
  Name                  String
  Password              String
  MobileNumber          String    @unique
  DOB                   DateTime?
  Email                 String?   @unique
  Gender                Gender
  AdhaarCardNumber      String?   @unique
  FrontSideAdhaarImage  String?
  BackSideAdhaarImage   String?
  PanNumber             String?   @unique
  PanImage              String?
  LastLoggedIn          DateTime  @default(now())
  CreatedDate           DateTime  @default(now())
  // Relationships
  OwnerVehicles         OwnerVehicle[]
  OwnerWallet           OwnerWallet?   // Optional Wallet
  OwnerDriver           OwnerDriver[]
}

model Driver {
  Id                     Int       @default(autoincrement()) @id
  Name                   String?
  Gender                 Gender
  Password               String?
  MobileNumber           String    @unique
  DOB                    DateTime?
  DrivingLicenceNumber   String
  DrivingLicenceFrontImage String
  DrivingLicenceBackImage  String
  DriverImage            String
  Email                  String?   @unique
  AdhaarCardNumber       String    @unique
  FrontSideAdhaarImage   String
  BackSideAdhaarImage    String
  PanNumber              String    @unique
  PanImage               String
  LastLoggedIn           DateTime  @default(now())
  CreatedDate            DateTime  @default(now())
  // Relationships
  DriverVehicles         DriverVehicle[]
  DriverOwner            OwnerDriver[]
  DriverWallet           DriverWallet?  // Optional Wallet
}

model Vehicle {
  Id                    Int        @default(autoincrement()) @id
  Model                 String
  Year                  String
  VehicleNumber         String
  Category              String
  VehicleImage          String?
  VehicleInsuranceImage String?
  PermitImage           String?

  // Relationships
  DriverVehicles        DriverVehicle[]
  OwnerVehicles         OwnerVehicle[]
}

model OwnerDriver {
  Id        Int    @default(autoincrement()) @id
  OwnerId   Int
  DriverId  Int
  Owner     Owner @relation(fields: [OwnerId],references: [Id])
  Driver    Driver @relation(fields: [DriverId],references: [Id])
}

model DriverVehicle {
  Id        Int     @default(autoincrement()) @id
  DriverId  Int
  VehicleId Int

  Driver    Driver  @relation(fields: [DriverId], references: [Id])
  Vehicle   Vehicle @relation(fields: [VehicleId], references: [Id])
}

model OwnerVehicle {
  Id        Int     @default(autoincrement()) @id
  OwnerId   Int
  VehicleId Int

  Owner     Owner   @relation(fields: [OwnerId], references: [Id])
  Vehicle   Vehicle @relation(fields: [VehicleId], references: [Id])
}

model Otp {
  Id           Int       @id @default(autoincrement())
  MobileNumber String    @unique
  Otp          String
  ExpiresAt    DateTime  @default(now())
  CreatedAt    DateTime  @default(now())

  @@index([MobileNumber])
  @@map("otps")
}

model OwnerWallet {
  Id          Int       @default(autoincrement()) @id
  OwnerId     Int       @unique
  Amount      Int
  Owner       Owner     @relation(fields: [OwnerId], references: [Id])
  LastUpdated DateTime  @default(now())
}

model DriverWallet {
  Id          Int       @default(autoincrement()) @id
  DriverId    Int       @unique
  Amount      Int
  Driver      Driver    @relation(fields: [DriverId], references: [Id])
  LastUpdated DateTime  @default(now())
}

model UserWallet {
  Id          Int   @default(autoincrement()) @id
  UserId      Int @unique
  Amount      Int
  User        User  @relation(fields: [UserId],references: [Id])
}
