generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum to represent user type (Driver or Owner)
enum UserType {
  DRIVER
  OWNER
  USER
}

enum Gender{
  MALE
  FEMALE
}

model User{
  Id                 Int   @default(autoincrement()) @id
  MobileNumber       String @unique
  Name               String
  Password           String
  DOB                DateTime?
  Email              String?
  IsActive           Boolean @default(true)  
  Latitude           Float?
  Longitude          Float?
  LastLoggedIn       DateTime  @default(now())
  CreatedDate        DateTime  @default(now())
  Gender             Gender
  UserWallet         UserWallet?
  Bookings           Bookings[]
}
model Owner {
  Id                    Int       @default(autoincrement()) @id
  Name                  String
  Password              String
  MobileNumber          String    @unique
  DOB                   DateTime?
  Email                 String?   @unique
  Gender                Gender
  IsActive              Boolean  @default(true)
  AdhaarCardNumber      String?   @unique
  FrontSideAdhaarImage  String?
  BackSideAdhaarImage   String?
  OwnerImage            String?
  PanNumber             String?   @unique
  PanImage              String?
  LastLoggedIn          DateTime  @default(now())
  CreatedDate           DateTime  @default(now())
  // Relationships
  OwnerVehicles         OwnerVehicle[]
  OwnerWallet           OwnerWallet?        // Optional Wallet
  OwnerDriver           OwnerDriver[]
  FareNegotiations      FareNegotiation[]
}

model Driver {
  Id                     Int       @default(autoincrement()) @id
  Name                   String?
  Gender                 Gender
  Password               String?
  MobileNumber           String    @unique
  DOB                    DateTime?
  IsActive               Boolean   @default(true)
  DrivingLicenceNumber   String
  DrivingLicenceFrontImage String
  DrivingLicenceBackImage  String
  DriverImage            String
  Email                  String?   @unique
  AdhaarCardNumber       String    @unique
  FrontSideAdhaarImage   String
  BackSideAdhaarImage    String
  PanNumber              String    @unique
  PanImage               String
  LastLoggedIn           DateTime  @default(now())
  CreatedDate            DateTime  @default(now())
  IsOnline               Boolean   @default(false)
  Latitude               Float?
  Longitude              Float?
  // Relationships
  DriverVehicles         DriverVehicle[]
  DriverOwner            OwnerDriver[]
  DriverWallet           DriverWallet?  // Optional Wallet
  Bookings               Bookings[]
  FareNegotiations      FareNegotiation[]
}

model Vehicle {
  Id                    Int        @default(autoincrement()) @id
  Model                 String
  Year                  String
  VehicleNumber         String
  Category              String?
  VehicleImage          String?
  VehicleInsuranceImage String?
  PermitImage           String?
  VehicleType           VehicleType?
  // Relationships
  DriverVehicles        DriverVehicle[]
  OwnerVehicles         OwnerVehicle[]
  Bookings              Bookings[]
}

model OwnerDriver {
  Id        Int    @default(autoincrement()) @id
  OwnerId   Int
  DriverId  Int
  Owner     Owner @relation(fields: [OwnerId],references: [Id])
  Driver    Driver @relation(fields: [DriverId],references: [Id])
}

model DriverVehicle {
  Id        Int     @default(autoincrement()) @id
  DriverId  Int     
  VehicleId Int     @unique
  Driver    Driver  @relation(fields: [DriverId], references: [Id])
  Vehicle   Vehicle @relation(fields: [VehicleId], references: [Id])

  @@unique([DriverId, VehicleId])
}


model OwnerVehicle {
  Id        Int     @default(autoincrement()) @id
  OwnerId   Int
  VehicleId Int

  Owner     Owner   @relation(fields: [OwnerId], references: [Id])
  Vehicle   Vehicle @relation(fields: [VehicleId], references: [Id])
}

model Otp {
  Id           Int       @id @default(autoincrement())
  MobileNumber String    @unique
  Otp          String
  ExpiresAt    DateTime  @default(now())
  CreatedAt    DateTime  @default(now())

  @@index([MobileNumber])
  @@map("otps")
}

model OwnerWallet {
  Id          Int       @default(autoincrement()) @id
  OwnerId     Int       @unique
  Amount      Int
  Owner       Owner     @relation(fields: [OwnerId], references: [Id])
  LastUpdated DateTime  @default(now())
}

model DriverWallet {
  Id          Int       @default(autoincrement()) @id
  DriverId    Int       @unique
  Amount      Int
  Driver      Driver    @relation(fields: [DriverId], references: [Id])
  LastUpdated DateTime  @default(now())
}

model UserWallet {
  Id          Int   @default(autoincrement()) @id
  UserId      Int @unique
  Amount      Int
  User        User  @relation(fields: [UserId],references: [Id])
}

enum PaymentMode{
  CASH
  ONLINE
}

enum BookingStatus{
  Pending
  Confirmed
  Cancelled
  Ongoing
  Completed
}

model Bookings {
  Id                          Int @default(autoincrement()) @id
  UserId                      Int
  PickUpLatitude              Float @default(0)
  PickUpLongitude             Float @default(0)
  DropLatitude                Float @default(0)
  DropLangitude               Float @default(0)
  PickUpLocation              String 
  DropLocation                String
  Product                     String
  Distance                    String
  DriverId                    Int?
  VehicleId                   Int?
  VehicleType                 VehicleType @default(MINI_TRUCK)
  Fare                        String
  ProductImage                String?
  Status                      BookingStatus
  PaymentMode                 PaymentMode
  BookingTime                 DateTime @default(now())
  StartTime                   DateTime
  User                        User @relation(fields: [UserId],references: [Id])
  CreatedDateTime             DateTime @default(now())
  UpdatedDateTime             DateTime @default(now())
  Driver                      Driver? @relation(fields: [DriverId],references: [Id])
  Vehicle                     Vehicle? @relation(fields: [VehicleId],references: [Id]) 
  FareNegotiations            FareNegotiation[]
}
model Fare {
  Id              String   @id @default(uuid())
  VehicleType     VehicleType  // Enum: bike, truck, etc.
  BaseFare        Float    // Minimum fare
  CostPerKm       Float    // Distance-based cost
  CostPerMinute   Float    // Time-based cost
  MinimumFare     Float    // Minimum charge regardless of distance/time
  SurgeMultiplier Float    @default(1.0) // Multiplier during high demand
  Currency        String   @default("INR")
  City            String?  // Fare rules can be city-specific
  IsActive        Boolean  @default(true)
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime @updatedAt
}

enum VehicleType {
  CARGO_CAR
  MINI_TRUCK
  PICKUP_TRUCK
  TANK_CAR
  LCV
  HCV
}

enum NegotiationStatus{
  Pending
  Accepted
  Declined
}

model FareNegotiation {
  Id Int @default(autoincrement()) @id
  BookingId Int
  Booking Bookings @relation(fields: [BookingId],references: [Id])
  DriverId Int
  Driver Driver @relation(fields: [DriverId],references: [Id])
  OwnerId Int
  Owner Owner @relation(fields: [OwnerId],references: [Id])
  Status NegotiationStatus @default(Pending)
  NegotiatedFare String
  NegotiatedTime DateTime @default(now())
  @@unique([BookingId, DriverId])
}
model Admin {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  fullName      String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?

  // Relations
  roles         UserRole[]
  createdRoles  Role[]    @relation("RoleCreator")
  assignedRoles UserRole[] @relation("RoleAssigner")
  auditLogs     PermissionAuditLog[]

  @@index([email])
  @@index([isActive])
  @@map("admin")
}

model PermissionCategory {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  icon         String?
  displayOrder Int          @default(0)
  // Relations
  permissions  Permission[]

  @@index([displayOrder])
  @@map("permission_categories")
}

model Permission {
  id           String            @id @default(cuid())
  name         String
  code         String            @unique
  description  String?
  
  // Relations
  category     PermissionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  roles        RolePermission[]
  auditLogs    PermissionAuditLog[]

  @@index([code])
  @@index([categoryId])
  @@map("permissions")
}

model Role {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  isSystemRole  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  createdBy     Admin?     @relation("RoleCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdById   String?
  users         UserRole[]
  permissions   RolePermission[]
  auditLogs     PermissionAuditLog[]

  @@index([name])
  @@index([isSystemRole])
  @@map("roles")
}

model UserRole {
  id            String    @id @default(cuid())
  assignedAt    DateTime  @default(now())
  
  // Relations
  admin          Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId        String
  role          Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId        String
  assignedBy    Admin?     @relation("RoleAssigner", fields: [assignedById], references: [id], onDelete: SetNull)
  assignedById  String?

  @@unique([adminId, roleId])
  @@index([adminId])
  @@index([roleId])
  @@map("user_roles")
}

model RolePermission {
  id            String    @id @default(cuid())
  
  // Relations
  role          Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId        String
  permission    Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId  String

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

enum AuditActionType {
  GRANT
  REVOKE
  ROLE_CREATE
  ROLE_UPDATE
  ROLE_DELETE
}

model PermissionAuditLog {
  id              String          @id @default(cuid())
  actionType      AuditActionType
  details         String?
  actionTimestamp DateTime        @default(now())
  
  // Relations
  admin           Admin            @relation(fields: [adminId], references: [id])
  adminId         String
  role            Role?           @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId          String?
  permission      Permission?     @relation(fields: [permissionId], references: [id], onDelete: SetNull)
  permissionId    String?

  @@index([actionTimestamp])
  @@index([adminId])
  @@index([roleId])
  @@map("permission_audit_logs")
}

  